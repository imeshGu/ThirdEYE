# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CH3C8s0EsSN6TL1jUiesupXopVBmn8X-
"""

from google.colab import drive
drive.mount('/content/drive/')

cctv_F_location = '/content/drive/MyDrive/RESEARCH/TESTING_CCTV_FOOTAGES'
haarcascade_xml = '/content/drive/MyDrive/RESEARCH/opencv-data-haarcascades'

import os
import cv2
import imghdr
from matplotlib import pyplot as plt

!pip install deepface

cap_video = cv2.VideoCapture('/content/drive/MyDrive/RESEARCH/TESTING_CCTV_FOOTAGES/Normal_Videos_063_x264.mp4')

DeepFace.verify('/content/drive/MyDrive/RESEARCH/face_detection/my own custom dataset/data/00000216.jpg;)

face_det = cv2.dnn.readNetFromCaffe('deploy.prototxt','res10_300x300_ssd_iter_140000.caffemodel')

import numpy as np
import cv2
import tensorflow as tf
from tensorflow.keras.models import load_model
from google.colab.patches import cv2_imshow
facetracker = load_model('facetacker.h5')

cap = cv2.VideoCapture('/content/drive/MyDrive/RESEARCH/TESTING_CCTV_FOOTAGES/HD-D113 CCTV Camera Sample Day Video Footage- Erdington Thief Series.mp4')
while cap.isOpened():
    _ , frame = cap.read()
    frame = frame[50:500, 50:500,:]
    
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    resized = tf.image.resize(rgb, (120,120))
    
    yhat = facetracker.predict(np.expand_dims(resized/255,0))
    sample_coords = yhat[1][0]
    
    if yhat[0] > 0.5: 
        # Controls the main rectangle
        cv2.rectangle(frame, 
                      tuple(np.multiply(sample_coords[:2], [450,450]).astype(int)),
                      tuple(np.multiply(sample_coords[2:], [450,450]).astype(int)), 
                            (255,0,0), 2)
        # Controls the label rectangle
        cv2.rectangle(frame, 
                      tuple(np.add(np.multiply(sample_coords[:2], [450,450]).astype(int), 
                                    [0,-30])),
                      tuple(np.add(np.multiply(sample_coords[:2], [450,450]).astype(int),
                                    [80,0])), 
                            (255,0,0), -1)
        
        # Controls the text rendered
        cv2.putText(frame, 'face', tuple(np.add(np.multiply(sample_coords[:2], [450,450]).astype(int),
                                               [0,-5])),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2, cv2.LINE_AA)
    
    cv2.imshow(frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()

